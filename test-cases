Here are some test cases to help you thoroughly test your pipex code:

1. Basic Functionality (Simple Command Chain):
Command: ./pipex file1.txt "cat" "wc -l" file2.txt
Explanation: This test should pass the contents of file1.txt through the cat command (which outputs the file) and then through wc -l (which counts the number of lines). The result should be written to file2.txt.
Expected Output: file2.txt should contain the number of lines in file1.txt.

2. Handling Non-existent Files:
Command: ./pipex nonexistent.txt "cat" "wc -l" output.txt
Explanation: nonexistent.txt does not exist. Your program should handle this error gracefully and output an appropriate error message.
Expected Output: Error message like Error in opening files.

3. Incorrect Command (Invalid cmd1):
Command: ./pipex file1.txt "nonexistentcommand" "wc -l" output.txt
Explanation: The first command does not exist. This test ensures that your program handles the failure of the first command.
Expected Output: Error message like cmd not found: nonexistentcommand.

4. Incorrect Command (Invalid cmd2):
Command: ./pipex file1.txt "cat" "invalidcmd" output.txt
Explanation: This test checks how your program handles a failure in the second command.
Expected Output: Error message like cmd not found: invalidcmd.

5. Empty Input File:
Command: touch empty.txt && ./pipex empty.txt "cat" "wc -l" output.txt
Explanation: Testing with an empty input file (empty.txt) should produce an output of 0 in output.txt, as there are no lines in the input file.
Expected Output: 0 in output.txt.

6. Command with Arguments:
Command: ./pipex file1.txt "grep 'search_term'" "wc -w" output.txt
Explanation: This tests how your program handles commands with arguments. The first command (grep 'search_term') searches for the term in file1.txt, and the second command (wc -w) counts the number of words.
Expected Output: The number of words in the lines containing search_term in file1.txt should be written to output.txt.

7. Permission Issues:
Command: chmod 000 file1.txt && ./pipex file1.txt "cat" "wc -l" output.txt
Explanation: This tests how your program handles permission errors. The input file (file1.txt) has no read permissions.
Expected Output: An error message indicating permission denied.

8. Output Redirection Test (Appending to a File):
Command: ./pipex file1.txt "cat" "wc -l" file2.txt && ./pipex file1.txt "cat" "wc -l" file2.txt
Explanation: Run the command twice, checking if your program correctly overwrites file2.txt instead of appending to it.
Expected Output: Only the result of the second run should be present in file2.txt.

9. Testing Large Files:
Command: ./pipex largefile.txt "cat" "wc -w" output.txt
Explanation: Test how your program handles large input files.
Expected Output: output.txt should contain the number of words in largefile.txt.


--your--own--
1. create a executable file that returns NULL or break on purpose and then check wether it is freeing everything properly or not.